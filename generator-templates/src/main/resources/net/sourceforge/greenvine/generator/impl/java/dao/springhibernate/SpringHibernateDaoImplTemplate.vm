package ${daoImplType.packageName};

import java.util.List;

import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import org.springframework.stereotype.Repository;

import ${daoType};
import ${entityType};
import ${identityType};

import javax.annotation.Generated;

@Generated("net.sourceforge.greenvine.generator.impl.java.dao.springhibernate.SpringHibernateDaoImplGenerator")
@Repository
public class ${daoImplType.className} extends HibernateDaoSupport implements ${daoType.className} {

     /* (non-Javadoc)
     * @see ${daoType}#load${entityType.className}(${identityType.className})
     */
    @Override
    public ${entityType.className} load${entityType.className}(${identityType.className} ${entity.identity.name}) {
        return (${entityType.className}) getHibernateTemplate().load(${entityType.className}.class, ${entity.identity.name});
    }
    
    /* (non-Javadoc)
     * @see ${daoType}#find${entityType.className}(${identityType.className})
     */
    @Override
    public ${entityType.className} find${entityType.className}(${identityType.className} ${entity.identity.name}) {
        return (${entityType.className}) getHibernateTemplate().get(${entityType.className}.class, ${entity.identity.name});
    }

    /* (non-Javadoc)
     * @see ${daoType}#findAll${entityType.className}s()
     */
    @Override
    @SuppressWarnings("unchecked") 
    public List<${entityType.className}> findAll${entityType.className}s() {
        return (List<${entityType.className}>)getHibernateTemplate().find("from ${entityType} as o order by o.id");
    }
    
#if (!$entity.readOnly)
    /* (non-Javadoc)
     * @see ${daoType}#update${entityType.className}(${entityType.className})
     */
    @Override 
    public void update${entityType.className}(${entityType.className} ${entity.name.objectName}) {
        getHibernateTemplate().merge(${entity.name.objectName});

    }
    
    /* (non-Javadoc)
     * @see ${daoType}#create${entityType.className}(${entityType.className})
     */
    @Override
    public void create${entityType.className}(${entityType.className} ${entity.name.objectName}) {
        getHibernateTemplate().persist(${entity.name.objectName});

    }

    /* (non-Javadoc)
     * @see ${daoType}#remove${entityType.className}(${identityType.className})
     */
    @Override
    public void remove${entityType.className}(${identityType.className} ${entity.identity.name}) {
         Object ${entity.name.objectName} = getHibernateTemplate().load(${entityType.className}.class, ${entity.identity.name});
         getHibernateTemplate().delete(${entity.name.objectName});

    }

#end
}
